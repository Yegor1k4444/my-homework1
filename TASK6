<?php


interface Transport {
    public function move();
}


abstract class Vehicle implements Transport {
    protected $brand;

    public function __construct($brand) {
        $this->brand = $brand;
    }

    abstract public function move();
}


abstract class Passenger implements Transport {
    protected $name;

    public function __construct($name) {
        $this->name = $name;
    }

    abstract public function move();
}


abstract class Stop implements Transport {
    protected $name;

    public function __construct($name) {
        $this->name = $name;
    }

    abstract public function move();
}


class Bus extends Vehicle {
    public function move() {
        echo "The {$this->brand} bus is moving.";
    }
}


class Student extends Passenger {
    public function move() {
        echo "{$this->name} is moving as a student.";
    }
}

class Babka extends Passenger {
    public function move() {
        echo "{$this->name} is moving as a babka.";
    }
}

class Programist extends Passenger {
    public function move() {
        echo "{$this->name} is moving as a programmer.";
    }
}


class Konechka extends Stop {
    public function move() {
        echo "The {$this->name} bus stop is reached.";
    }
}

class SimpleStop extends Stop {
    public function move() {
        echo "The {$this->name} simple stop is reached.";
    }
}


$bigBus = new Bus('BigBus');
$marshrutka = new Bus('Marshrutka');
$tralik = new Bus('Tralik');

$student = new Student('John');
$babka = new Babka('Olga');
$programist = new Programist('Alice');

$konechka = new Konechka('Konechka');
$simpleStop = new SimpleStop('SimpleStop');

// Using instances
$bigBus->move();
echo "<br>";
$student->move();
echo "<br>";
$konechka->move();
